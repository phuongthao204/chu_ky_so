from flask import Flask, request, render_template_string
import os, hashlib, base64
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.exceptions import InvalidSignature

app = Flask(__name__)
UPLOAD_FOLDER = "uploads"
RECEIVED_FOLDER = "received"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RECEIVED_FOLDER, exist_ok=True)

# Kh·ªüi t·∫°o RSA key pair (Ch·ªâ t·∫°o m·ªôt l·∫ßn khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông)
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
public_key = private_key.public_key()
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
).decode()

# HTML Giao di·ªán ch√≠nh (c√≥ c·∫£i ti·∫øn ƒë·ªÉ t√≠ch h·ª£p Peer-to-Peer Web Sharing v√† 2 c·ªôt)
HTML = """
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Truy·ªÅn - Nh·∫≠n File c√≥ Ch·ªØ K√Ω S·ªë (RSA + SHA-512)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .message-box {
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.9rem;
            margin-top: 1rem;
        }
        .message-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .message-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .message-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        .file-input-label {
            display: block;
            padding: 0.5rem 1rem;
            background-color: #f0f4f8;
            border: 1px solid #cbd5e1;
            border-radius: 0.375rem;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.2s ease;
        }
        .file-input-label:hover {
            background-color: #e2e8f0;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">
    <div class="max-w-6xl mx-auto p-8 bg-white rounded-xl shadow-lg space-y-8 w-full">
        <h1 class="text-3xl font-extrabold text-blue-700 text-center flex items-center justify-center gap-3">
            <span class="text-4xl">üì©</span> Truy·ªÅn - Nh·∫≠n File c√≥ Ch·ªØ K√Ω S·ªë
        </h1>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="border border-green-200 rounded-lg p-6 bg-green-50">
                <h2 class="text-xl font-bold text-green-800 mb-4 flex items-center gap-2">
                    <span class="text-2xl">üîê</span> K√Ω file ƒë·ªÉ g·ª≠i
                </h2>
                <p class="text-sm text-gray-700 mb-4">
                    Ch·ªçn t·ªáp b·∫°n mu·ªën k√Ω. Sau khi k√Ω, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ch·ªØ k√Ω s·ªë v√† public key.
                    B·∫°n c·∫ßn <strong class="text-green-700">t·ª± chia s·∫ª t·ªáp g·ªëc n√†y</strong> qua m·ªôt d·ªãch v·ª• chia s·∫ª tr·ª±c ti·∫øp nh∆∞
                    <a href="https://snapdrop.net/" target="_blank" class="text-blue-600 hover:underline">Snapdrop.net</a>,
                    <a href="https://sharedrop.io/" target="_blank" class="text-blue-600 hover:underline">Sharedrop.io</a>,
                    <a href="https://send-anywhere.com/" target="_blank" class="text-blue-600 hover:underline">Send-Anywhere.com</a>, ho·∫∑c
                    <a href="https://wormhole.app/" target="_blank" class="text-blue-600 hover:underline">Wormhole.app</a>.
                    G·ª≠i <strong class="text-green-700">ch·ªØ k√Ω s·ªë</strong>, v√† <strong class="text-green-700">public key c·ªßa b·∫°n</strong> cho ng∆∞·ªùi nh·∫≠n qua m·ªôt k√™nh ri√™ng (email, tin nh·∫Øn, v.v.).
                </p>
                <form method="POST" enctype="multipart/form-data" action="/sign_and_get_details" class="space-y-4">
                    <div>
                        <label for="file_to_sign" class="file-input-label">
                            Ch·ªçn t·ªáp ƒë·ªÉ k√Ω
                            <span id="file_to_sign_name" class="ml-2 text-gray-500"></span>
                        </label>
                        <input type="file" name="file" id="file_to_sign" class="hidden" required onchange="document.getElementById('file_to_sign_name').innerText = this.files[0].name || ''">
                    </div>
                    <button type="submit" class="w-full bg-green-600 text-white px-5 py-2.5 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200">
                        K√Ω file v√† nh·∫≠n th√¥ng tin
                    </button>
                </form>
                {% if signed_data %}
                <div class="mt-6 p-4 bg-gray-100 rounded-lg border border-gray-200 space-y-4">
                    <p class="text-lg font-semibold text-gray-800">Th√¥ng tin sau khi k√Ω:</p>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ch·ªØ k√Ω s·ªë (Base64):</label>
                        <textarea readonly class="w-full border border-gray-300 p-2 rounded-md bg-white text-gray-800 text-xs font-mono resize-y" rows="4" onclick="this.select()">{{ signed_data.signature }}</textarea>
                        <button onclick="navigator.clipboard.writeText(this.previousElementSibling.value)" class="mt-2 bg-blue-500 text-white px-3 py-1.5 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 text-sm">
                            Sao ch√©p Ch·ªØ k√Ω
                        </button>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Public Key (PEM):</label>
                        <textarea readonly class="w-full border border-gray-300 p-2 rounded-md bg-white text-gray-800 text-xs font-mono resize-y" rows="8" onclick="this.select()">{{ signed_data.public_key }}</textarea>
                        <button onclick="navigator.clipboard.writeText(this.previousElementSibling.value)" class="mt-2 bg-blue-500 text-white px-3 py-1.5 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 text-sm">
                            Sao ch√©p Public Key
                        </button>
                    </div>
                    <p class="text-sm text-red-700 font-semibold mt-4">
                        ‚ö†Ô∏è Quan tr·ªçng: H√£y t·ª± chia s·∫ª t·ªáp g·ªëc ƒë√£ k√Ω qua m·ªôt d·ªãch v·ª• chia s·∫ª tr·ª±c ti·∫øp v√† g·ª≠i Ch·ªØ k√Ω s·ªë v√† Public Key tr√™n cho ng∆∞·ªùi nh·∫≠n.
                    </p>
                </div>
                {% endif %}
                {% if sent_message %}
                <p class="message-box {% if 'L·ªói' in sent_message %}message-error{% else %}message-success{% endif %}">
                    {{ sent_message }}
                </p>
                {% endif %}
            </div>

            <div class="border border-purple-200 rounded-lg p-6 bg-purple-50">
                <h2 class="text-xl font-bold text-purple-800 mb-4 flex items-center gap-2">
                    <span class="text-2xl">üì•</span> Nh·∫≠n v√† x√°c minh file
                </h2>
                <p class="text-sm text-gray-700 mb-4">
                    Ng∆∞·ªùi nh·∫≠n c·∫ßn t·∫£i t·ªáp g·ªëc t·ª´ d·ªãch v·ª• chia s·∫ª tr·ª±c ti·∫øp m√† ng∆∞·ªùi g·ª≠i ƒë√£ s·ª≠ d·ª•ng.
                    Sau ƒë√≥, d√°n ch·ªØ k√Ω s·ªë v√† public key ƒë∆∞·ª£c cung c·∫•p b·ªüi ng∆∞·ªùi g·ª≠i v√†o ƒë√¢y.
                </p>
                <form method="POST" enctype="multipart/form-data" action="/receive" class="space-y-4">
                    <div>
                        <label for="file_receive" class="file-input-label">
                            Ch·ªçn t·ªáp ƒë√£ nh·∫≠n (t·ª´ d·ªãch v·ª• chia s·∫ª)
                            <span id="file_receive_name" class="ml-2 text-gray-500"></span>
                        </label>
                        <input type="file" name="file" id="file_receive" class="hidden" required onchange="document.getElementById('file_receive_name').innerText = this.files[0].name || ''">
                    </div>
                    <textarea name="signature" placeholder="D√°n ch·ªØ k√Ω (base64) t·ª´ ng∆∞·ªùi g·ª≠i" class="w-full border border-gray-300 p-3 rounded-md focus:ring-purple-500 focus:border-purple-500" rows="4" required></textarea>
                    <textarea name="pubkey" placeholder="D√°n public key (PEM) c·ªßa ng∆∞·ªùi g·ª≠i" class="w-full border border-gray-300 p-3 rounded-md focus:ring-purple-500 focus:border-purple-500" rows="6" required></textarea>
                    <button type="submit" class="w-full bg-purple-600 text-white px-5 py-2.5 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-colors duration-200">
                        X√°c minh file
                    </button>
                </form>
                {% if verify_message %}
                <p class="message-box {% if 'th·∫•t b·∫°i' in verify_message %}message-error{% else %}message-success{% endif %}">
                    {{ verify_message }}
                </p>
                {% endif %}
            </div>
        </div>
    </div>
</body>
</html>
"""

@app.route("/", methods=["GET"])
def home():
    return render_template_string(HTML)

@app.route("/sign_and_get_details", methods=["POST"])
def sign_and_get_details():
    file = request.files.get("file")

    if not file:
        return render_template_string(HTML, sent_message="‚ùå L·ªói: Vui l√≤ng ch·ªçn t·ªáp ƒë·ªÉ k√Ω.")

    filepath = os.path.join(UPLOAD_FOLDER, file.filename)
    try:
        file.save(filepath)
    except Exception as e:
        return render_template_string(HTML, sent_message=f"‚ùå L·ªói khi l∆∞u t·ªáp: {e}")

    with open(filepath, "rb") as f:
        data = f.read()

    # T·∫°o ch·ªØ k√Ω
    digest = hashlib.sha512(data).digest()
    try:
        signature = private_key.sign(
            digest,
            padding.PKCS1v15(),
            hashes.SHA512()
        )
        signature_b64 = base64.b64encode(signature).decode()
        
        # Tr·∫£ v·ªÅ ch·ªØ k√Ω v√† public key ƒë·ªÉ ng∆∞·ªùi d√πng sao ch√©p
        signed_data = {
            "signature": signature_b64,
            "public_key": public_pem
        }
        return render_template_string(HTML, signed_data=signed_data)

    except Exception as e:
        return render_template_string(HTML, sent_message=f"‚ùå L·ªói khi t·∫°o ch·ªØ k√Ω: {e}")

@app.route("/receive", methods=["POST"])
def receive():
    file = request.files.get("file")
    signature_b64 = request.form.get("signature")
    pubkey_pem = request.form.get("pubkey")

    if not file or not signature_b64 or not pubkey_pem:
        return render_template_string(HTML, verify_message="‚ùå L·ªói: Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß t·ªáp, ch·ªØ k√Ω v√† public key.")

    filepath = os.path.join(RECEIVED_FOLDER, file.filename)
    try:
        file.save(filepath)
    except Exception as e:
        return render_template_string(HTML, verify_message=f"‚ùå L·ªói khi l∆∞u t·ªáp ƒë√£ nh·∫≠n: {e}")

    with open(filepath, "rb") as f:
        data = f.read()
    digest = hashlib.sha512(data).digest()
    
    try:
        signature = base64.b64decode(signature_b64)
    except Exception as e:
        return render_template_string(HTML, verify_message=f"‚ùå X√°c minh th·∫•t b·∫°i: Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i Base64): {e}")

    try:
        public_key = serialization.load_pem_public_key(pubkey_pem.encode())
        # C·ªë g·∫Øng x√°c minh ch·ªØ k√Ω
        public_key.verify(signature, digest, padding.PKCS1v15(), hashes.SHA512())
        verify_msg = f"‚úÖ X√°c minh th√†nh c√¥ng! File '{file.filename}' h·ª£p l·ªá v√† ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i th∆∞ m·ª•c '{RECEIVED_FOLDER}'."
    except InvalidSignature:
        verify_msg = "‚ùå X√°c minh th·∫•t b·∫°i: Ch·ªØ k√Ω kh√¥ng kh·ªõp v·ªõi d·ªØ li·ªáu ho·∫∑c public key. File c√≥ th·ªÉ ƒë√£ b·ªã thay ƒë·ªïi ho·∫∑c ch·ªØ k√Ω/public key kh√¥ng ƒë√∫ng."
    except ValueError as e:
        verify_msg = f"‚ùå X√°c minh th·∫•t b·∫°i: Public key kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng PEM ho·∫∑c l·ªói kh√°c): {e}"
    except Exception as e:
        verify_msg = f"‚ùå X√°c minh th·∫•t b·∫°i: X·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x√°c minh: {e}"

    return render_template_string(HTML, verify_message=verify_msg)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)